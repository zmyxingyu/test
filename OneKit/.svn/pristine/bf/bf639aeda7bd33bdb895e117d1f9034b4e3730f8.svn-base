package com.cn21.onekit.lib.jsinter;

import java.io.File;

import android.Manifest;
import android.app.Activity;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Vibrator;
import android.provider.Settings;
import android.view.Window;
import android.view.WindowManager;

import com.cn21.onekit.lib.utils.NetworkUtils;
import com.cn21.onekit.lib.utils.PermissionManager;
import com.cn21.onekit.lib.utils.SharePreferenceUtil;

/**
 * Created by xuxd on 2017/7/24.
 */

public final class OkBridgeApiImpl implements OkBridgeApi {

    private Context context;

    public OkBridgeApiImpl(Context context){
        this.context = context;
    }

    @Override
    public String checkJsApi() {
        return null;
    }

    @Override
    public String getNetworkType() {
        if (!PermissionManager.checkPermission(context, Manifest.permission.ACCESS_NETWORK_STATE)) {
            return null;
        }
        return NetworkUtils.getNetworkType(context);
    }

    @Override
    public void logout() {

    }

    @Override
    public String chooseImage(int count, String sizeType, String sourceType) {
        return null;
    }

    @Override
    public boolean previewImage(String imagePath) {
        File file = new File(imagePath);
        if (file.exists()) {
            try {
                Intent intent = new Intent();
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                intent.setAction(Intent.ACTION_VIEW);
                intent.setDataAndType(Uri.fromFile(file), "image/*");
                context.startActivity(intent);
                return true;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    @Override
    public void showNavigationBar() {

    }

    @Override
    public void hideNavigationBar() {

    }

    @Override
    public void setNavigationBarTitle(String title) {

    }

    @Override
    public void setNavigationBarColor(String color) {

    }

    @Override
    public void setViewBgColor(String color) {

    }

    @Override
    public void setScreenBrightness(int brightness) {
        if (!(context instanceof Activity)) {
            return;
        }
        Window window = ((Activity) context).getWindow();
        if (window == null) {
            return;
        }
        WindowManager.LayoutParams lp = window.getAttributes();
        if (brightness == -1) {
            lp.screenBrightness = WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_NONE;
        } else {
            lp.screenBrightness = (brightness <= 0? 1: brightness) / 255f;
        }
        window.setAttributes(lp);
    }

    @Override
    public int getScreenBrightness() {
        int systemBrightness = 0;
        try {
            systemBrightness = Settings.System.getInt(context.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return systemBrightness;
    }

    @Override
    public void setKeepScreenOn() {
        if (context instanceof Activity) {
            if (((Activity) context).getWindow() != null) {
                ((Activity) context).getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
            }
        }
    }

    @Override
    public void vibrate(int param) {
        if (!PermissionManager.checkPermission(context, Manifest.permission.VIBRATE)) {
            return;
        }
        Vibrator vibrator = (Vibrator) context.getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE);
        if (vibrator != null &&
            vibrator.hasVibrator()) {
            vibrator.cancel();
            vibrator.vibrate(param);
        }
    }

    @Override
    public void setClipboardData(String content) {
        ClipboardManager clipboardManager =
            (ClipboardManager) context.getApplicationContext().getSystemService(Context.CLIPBOARD_SERVICE);
        if (clipboardManager != null) {
            ClipData clipData = ClipData.newPlainText(content, content);
            clipboardManager.setPrimaryClip(clipData);
        }
    }

    @Override
    public String getClipboardData() {
        ClipboardManager clipboardManager =
            (ClipboardManager) context.getApplicationContext().getSystemService(Context.CLIPBOARD_SERVICE);
        if (clipboardManager != null) {
            ClipData clipData = clipboardManager.getPrimaryClip();
            if (clipData != null) {
                final int count = clipData.getItemCount();
                return count > 0? String.valueOf(clipData.getItemAt(count - 1).getText()): null;
            }
        }
        return null;
    }

    @Override
    public void makePhoneCall(String phoneNum) {
        try {
            Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel://" + phoneNum));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void setStorage(String key, String obj) {
        SharePreferenceUtil.saveKeyValue(context, key, obj);
    }

    @Override
    public String getStorage(String key) {
        return SharePreferenceUtil.getString(context, key);
    }

    @Override
    public void removeStorage(String key) {
        SharePreferenceUtil.removeKey(context, key);
    }

    @Override
    public void clearStorage() {
        SharePreferenceUtil.clearAll(context);
    }

    @Override
    public void showShortToast(String msg) {

    }

    @Override
    public void showLongToast(String msg) {

    }

    @Override
    public void systemShare(String title, String content, String imageUrl) {

    }

    @Override
    public String getLoginInfo() {
        return null;
    }

    @Override
    public void request(String method, String url, String data) {

    }

    @Override
    public void uploadFile(String url, String filePath) {

    }

    @Override
    public void downloadFile(String url) {

    }
}
